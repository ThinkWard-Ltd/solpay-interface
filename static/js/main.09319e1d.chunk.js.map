{"version":3,"sources":["utils/uint64.js","utils/constants.js","components/Column/index.js","components/ExternalLink/index.js","components/SocialLinks/index.js","components/SocialLinks/constants.js","components/NumericInput/index.js","components/Row/index.js","components/AmountInputPanel/index.js","components/AddressInputPanel/index.js","assets/solana-logo.png","components/Main/index.js","App.js","reportWebVitals.js","index.js","utils/api.js","utils/mics.js"],"names":["u64","a","reverse","b","Buffer","from","length","assert","zeroPad","alloc","copy","buffer","BN","map","i","toString","slice","join","config","localnetUrl","providerUrl","explorerLink","fee","Number","process","network","relayerUrl","TOKEN_PROGRAM_ID","PublicKey","ASSOCIATED_TOKEN_PROGRAM_ID","METASOL_PROGRAM_ID","METASOL_PUBLIC_KEY","FEE_PAYER_PUBLIC_KEY","submitTxLayout","BufferLayout","property","uint64Layout","Column","styled","div","AutoColumn","gap","justify","ExternalLink","target","href","rel","rest","onClick","event","ctrlKey","metaKey","ReactGA","outboundLink","label","console","debug","preventDefault","window","location","socialLinkItems","name","url","categories","isExternal","headerNav","filter","item","includes","Icon","size","className","iconContent","viewBox","xmlns","fillRule","clipRule","strokeLinejoin","strokeMiterlimit","d","cx","cy","r","fill","background","w","h","borderRadius","SocialLinks","spacing","Input","input","NumericInput","value","onChange","inputRegex","RegExp","enforcer","nextUserInput","test","replace","inputMode","title","autoComplete","autoCorrect","type","pattern","placeholder","minLength","maxLength","spellCheck","Row","Box","width","align","padding","border","RowBetween","InputPanel","ContainerRow","InputContainer","LabelRow","AmountInputPanel","connection","account","onChangeAmount","onSelectToken","onTokenBalance","onSetShowCreateAccount","onError","updateBalance","updatedAddress","setBalanceUpdated","useState","decimals","symbol","address","allTokens","setAllTokens","selectedCurrencyBalance","setSelectedCurrencyBalance","selectedTokenSymbol","setSelectedTokenSymbol","handleSelectToken","data","element","tokenInfo","getTokenAccounts","addresses","getAssociatedTokenAddress","tokenAccount","getTokenBalance","balance","uiAmount","useEffect","chainId","getChainId","TokenListProvider","resolve","then","tokens","tokenList","filterByChainId","getList","concat","fetchTokenList","fontWeight","fontSize","color","style","display","cursor","toFixed","DropdownButton","onSelect","e","key","Dropdown","Item","eventKey","AddressInputPanel","id","handleInput","useCallback","withoutSpaces","autoCapitalize","Main","Connection","clusterApiUrl","error","setError","message","setMessage","amount","setAmount","recipient","setRecipient","solBalance","setSolBalance","tokenBalance","setTokenBalance","solletWallet","setSollectWallet","isConnected","setIsConnected","walletAddress","setWalletAddress","selectedTokenData","setSelectedTokenData","showCreateAccount","setShowCreateAccount","creatingAccount","setCreatingAccount","executing","setExecuting","setUpdateBalance","txSignature","setTxSignature","connectWallet","wallet","Wallet","connect","on","publicKey","log","toBase58","getSolBalance","sol","uiBalance","handleTransferSplToken","totalAmount","signAndSendTransaction","result","handleMesage","interval","setInterval","getSignatureStatus","status","confirmationStatus","clearInterval","catch","handleError","setTimeout","signature","enableTimeout","marginRight","Image","src","SolanaLogo","Button","variant","substr","Card","Body","tokenData","BigNumber","multipliedBy","dividedBy","plus","Col","createAndSendTestTokens","errorMsg","gt","maxW","justifyContent","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","initialize","REACT_APP_GOOGLE_ANALYTICS_ID","pageview","pathname","search","getBalance","Math","pow","mint","owner","getTokenAccountsByOwner","accounts","getTokenAccountBalance","findProgramAddress","toBuffer","transferAmount","Promise","reject","senderSplAccount","recipientSplAccount","feePayerSplAccount","keys","pubkey","isSigner","isWritable","span","times","exponentiatedBy","encode","instruction","TransactionInstruction","programId","getRecentBlockhash","recentBlock","transaction","Transaction","feePayer","recentBlockhash","blockhash","add","signTransaction","signedTx","bufferTx","serialize","verifySignatures","sendToRelayer","category","action","mintAddress","ownerAddress","axios","post"],"mappings":"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","file":"static/js/main.09319e1d.chunk.js","sourcesContent":["import BN from 'bn.js';\nimport assert from 'assert';\n\n/**\n * 64-bit value\n */\nexport class u64 extends BN {\n    /**\n     * Convert to Buffer representation\n     */\n    toBuffer() {\n        const a = super.toArray().reverse();\n        const b = Buffer.from(a);\n        if (b.length === 8) {\n            return b;\n        }\n        assert(b.length < 8, 'u64 too large');\n\n        const zeroPad = Buffer.alloc(8);\n        b.copy(zeroPad);\n        return zeroPad;\n    }\n\n    /**\n     * Construct a u64 from Buffer representation\n     */\n    static fromBuffer(buffer) {\n        assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n        return new BN(\n            [...buffer]\n                .reverse()\n                .map(i => `00${i.toString(16)}`.slice(-2))\n                .join(''),\n            16,\n        );\n    }\n}","import { PublicKey } from \"@solana/web3.js\";\nimport * as BufferLayout from \"buffer-layout\";\nimport { config } from \"dotenv\";\nconfig();\n\nexport const localnetUrl = \"http://127.0.0.1:8899\";\nexport const providerUrl = \"https://www.sollet.io\";\nexport const explorerLink = \"https://explorer.solana.com\";\nexport const fee = Number(process.env.REACT_APP_RELAYER_FEE) || 1;\nexport const network = process.env.REACT_APP_NETWORK || \"localnet\";\nexport const relayerUrl = process.env.REACT_APP_RELAYER_URL || \"http://localhost:5000\";\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\n\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey(\n    'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\n\nexport const METASOL_PROGRAM_ID = new PublicKey(\n    '2SgGaRNMTHCK8Y3XrBGa7nChLahyjXci1RLJinhmcJdQ',\n);\n\nexport const METASOL_PUBLIC_KEY = new PublicKey(\n    '5DuU7nRZrqS5jRZJjMVJASdaatu5h6h8WNKDz5ZUuYzq',\n);\n\nexport const FEE_PAYER_PUBLIC_KEY = new PublicKey(\n    'GE7ikPHM4yaS67rsyt8vs84D4d9m9VpueZrDSeFh9wW6',\n);\n\nconst uint64Layout = (property = 'uint64') => {\n    return BufferLayout.blob(8, property);\n}\n\nexport const submitTxLayout = BufferLayout.struct([\n    BufferLayout.u8('instruction'),\n    uint64Layout('amount'),\n]);\n","import styled from 'styled-components'\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n`\nexport const ColumnCenter = styled(Column)`\n  width: 100%;\n  align-items: center;\n`\n\nexport const AutoColumn = styled.div`\n  display: grid;\n  grid-auto-rows: auto;\n  grid-row-gap: ${({ gap }) => (gap === 'sm' && '8px') || (gap === 'md' && '12px') || (gap === 'lg' && '24px') || gap};\n  justify-items: ${({ justify }) => justify && justify};\n`\n\nexport default Column\n","import ReactGA from 'react-ga';\n\n/**\n * Outbound link that handles firing google analytics events\n */\nexport function ExternalLink({\n    target = '_blank',\n    href,\n    rel = 'noopener noreferrer',\n    ...rest\n}) {\n    const handleClick = (event) => {\n        // don't prevent default, don't redirect if it's a new tab\n        if (target === '_blank' || event.ctrlKey || event.metaKey) {\n            ReactGA.outboundLink({ label: href }, () => {\n                console.debug('Fired outbound link event', href)\n            })\n        } else {\n            event.preventDefault()\n            // send a ReactGA event and then trigger a location change\n            ReactGA.outboundLink({ label: href }, () => {\n                window.location.href = href\n            })\n        }\n    }\n\n    // eslint-disable-next-line\n    return <a\n        target={target}\n        rel={rel}\n        href={href}\n        onClick={handleClick}\n        {...rest}\n    ></a>\n}\n","import React from 'react';\nimport { HStack, Box } from '@chakra-ui/react';\nimport { navItems } from './constants';\nimport { ExternalLink } from '../ExternalLink';\n\nconst socialLinkItems = navItems.filter(item => item.categories.includes('social'));\n\nfunction Icon({ name, className, size }) {\n    let iconContent = null;\n    switch (name) {\n        case 'Twitter':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M256 0a256 256 0 110 512 256 256 0 010-512zm-45 392c113 0 175-94 175-175v-8c12-9 22-20 31-32-11 5-23 8-36 10 13-8 23-20 27-34-11 7-25 12-39 15a62 62 0 00-105 56c-51-3-96-27-126-65a62 62 0 0019 83c-10-1-20-3-28-8v1c0 30 21 54 49 60a61 61 0 01-27 1c7 25 30 42 57 43a124 124 0 01-91 25c27 18 59 28 94 28z\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Youtube':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M256 0a256 256 0 110 512 256 256 0 010-512zm153 179c-3-14-14-25-28-28-25-7-125-7-125-7s-100 0-125 7c-14 3-25 14-28 28-7 25-7 77-7 77s0 52 7 77c3 14 14 25 28 28 25 7 125 7 125 7s100 0 125-7c14-3 25-14 28-28 7-25 7-77 7-77s0-52-7-77zM224 304v-96l83 48-83 48z\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Discord':\n            iconContent = (\n                <svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <circle cx=\"256\" cy=\"256\" r=\"256\" className=\"metasolFill\" />\n                    <path\n                        d=\"M372 169s-33-26-72-29l-4 7c36 8 52 21 69 36-29-15-58-29-109-29s-80 14-109 29c17-15 37-29 69-36l-3-7c-42 3-73 29-73 29s-37 54-44 160c38 43 95 43 95 43l12-16c-21-7-43-19-63-42 23 18 59 37 116 37s93-19 117-37c-20 23-43 35-63 42l12 16s57 0 94-43c-6-106-44-160-44-160zM209 300c-14 0-26-13-26-29s12-30 26-30 25 13 25 30-11 29-25 29zm94 0c-14 0-25-13-25-29s11-30 25-30 26 13 26 30-12 29-26 29z\"\n                        fill=\"#FFF\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Github':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"\n                    />\n                </svg>\n            );\n            break;\n        case 'Blog':\n            iconContent = (\n                <svg\n                    viewBox=\"0 0 512 512\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    strokeLinejoin=\"round\"\n                    strokeMiterlimit=\"2\"\n                >\n                    <path\n                        className=\"metasolFill\"\n                        d=\"M511 256a255 255 0 10-255 255c141 0 255-114 255-255zm-229 0c0 63-51 114-113 114S56 319 56 256s51-114 113-114 113 51 113 114zm123 0c0 59-25 107-56 107s-56-48-56-107 25-107 56-107 56 48 56 107zm51 0c0 53-9 96-20 96s-20-43-20-96 9-96 20-96 20 43 20 96z\"\n                    />\n                </svg>\n            );\n            break;\n        default:\n    }\n    return (\n        <Box background=\"#fff\" w={size || '25px'} h={size || '25px'} borderRadius=\"100%\">\n            <Box className=\"socialIcon\">{iconContent}</Box>\n        </Box>\n    );\n}\n\nfunction SocialLinks({ size, spacing, ...rest }) {\n    return (\n        <HStack spacing={spacing || 10} {...rest}>\n            {socialLinkItems.map(item => (\n                <ExternalLink\n                    href={item.url}\n                    key={item.url}\n                >\n                    <Icon name={item.name} className=\"socialIcon\" size={size || 30} />\n                </ExternalLink>\n            ))}\n        </HStack>\n    );\n}\n\nexport default SocialLinks;\n","export const navItems = [\n    {\n        name: 'Twitter',\n        url: 'https://twitter.com/sol_meta',\n        categories: ['social'],\n        isExternal: true,\n    },\n    {\n        name: 'Discord',\n        url: 'https://discord.gg/invite/EWmMMHT7Qy',\n        categories: ['social'],\n        isExternal: true,\n    },\n    {\n        name: 'Github',\n        url: 'https://github.com/metasol',\n        categories: ['social'],\n        isExternal: true,\n    },\n    {\n        name: 'Blog',\n        url: 'https://medium.com/@metasol',\n        categories: ['social'],\n        headerNav: true,\n        isExternal: true,\n    },\n];\n","import { React } from 'react'\nimport styled from 'styled-components'\n\nconst Input = styled.input`\n  font-size: 1.25rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  width: 0;\n  background-color: white;\n  transition: color 300ms step-start;\n  color: black;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: rgb(195, 197, 217);\n  }\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: rgb(195, 197, 217);\n  }\n`\n\nexport default function NumericInput({\n    value,\n    onChange\n}) {\n    const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`);\n\n    function escapeRegExp(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n    }\n\n    const enforcer = (nextUserInput) => {\n        if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n            onChange(nextUserInput)\n        }\n    }\n\n    return (\n        <Input\n            value={value}\n            onChange={event => {\n                enforcer(event.target.value.replace(/,/g, '.'))\n            }}\n            // universal input options\n            inputMode=\"decimal\"\n            title=\"Token Amount\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            // text-specific options\n            type=\"text\"\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            placeholder='0.0'\n            minLength={1}\n            maxLength={79}\n            spellCheck=\"false\"\n        />\n    )\n}\n","import { Box } from '@chakra-ui/layout'\nimport styled from 'styled-components'\n\nconst Row = styled(Box)`\n  width: ${({ width }) => width ?? '100%'};\n  display: flex;\n  padding: 0;\n  align-items: ${({ align }) => align ?? 'center'};\n  justify-content: ${({ justify }) => justify ?? 'flex-start'};\n  padding: ${({ padding }) => padding};\n  border: ${({ border }) => border};\n  border-radius: ${({ borderRadius }) => borderRadius};\n`\n\nexport const RowBetween = styled(Row)`\n  justify-content: space-between;\n`\n\nexport const RowFlat = styled.div`\n  display: flex;\n  align-items: flex-end;\n`\n\nexport const AutoRow = styled(Row)`\n  flex-wrap: wrap;\n  margin: ${({ gap }) => gap && `-${gap}`};\n  justify-content: ${({ justify }) => justify && justify};\n\n  & > * {\n    margin: ${({ gap }) => gap} !important;\n  }\n`\n\nexport const RowFixed = styled(Row)`\n  width: fit-content;\n  margin: ${({ gap }) => gap && `-${gap}`};\n`\n\nexport default Row\n","import { React, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoColumn } from '../Column'\nimport NumericInput from '../NumericInput'\nimport { RowBetween } from '../Row'\nimport { TokenListProvider } from '@solana/spl-token-registry';\nimport { Dropdown, DropdownButton } from 'react-bootstrap'\nimport { getChainId } from '../../utils/mics'\nimport { network } from '../../utils/constants'\nimport {\n    getTokenBalance,\n    getTokenAccounts,\n    getAssociatedTokenAddress,\n} from '../../utils/api'\n\nconst InputPanel = styled.div`\n  position: relative;\n  border-radius: 1.25rem;\n  background-color: white;\n  z-index: 1;\n  width: 100%;\n`\n\nconst ContainerRow = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 1.25rem;\n  border: 1px solid rgb(240, 240, 255);\n  transition: border-color 300ms step-start,\n    color 500ms step-start;\n  background-color: white;\n`\n\nconst InputContainer = styled.div`\n  flex: 1;\n  padding: 1rem;\n`\n\nconst LabelRow = styled.div`\n  display: flex;\n  flex-flow: row-reverse wrap;\n  align-items: center;\n  span:hover {\n    cursor: pointer;\n    color: gray;\n  }\n`\n\nexport default function AmountInputPanel({\n    connection,\n    account,\n    value,\n    onChangeAmount,\n    onSelectToken,\n    onTokenBalance,\n    onSetShowCreateAccount,\n    onError,\n    updateBalance,\n    updatedAddress,\n    setBalanceUpdated,\n}) {\n    const [allTokens, setAllTokens] = useState([\n        {\n            decimals: 9,\n            symbol: \"MetaSPL\",\n            address: \"Cv7DvSt9842MSxX8LXQewpfcWNC8qT5P9w7wpHshcEzx\",\n        }\n    ]);\n\n    const [selectedCurrencyBalance, setSelectedCurrencyBalance] = useState(\"\");\n    const [selectedTokenSymbol, setSelectedTokenSymbol] = useState(\"Select a token\");\n\n    const handleSelectToken = async (event) => {\n        const data = allTokens.filter((element) => {\n            return element.address === event\n        });\n        const tokenInfo = data[0];\n\n        onSelectToken(data[0]);\n        setSelectedTokenSymbol(data[0].symbol);\n\n        if (account) {\n            const addresses = await getTokenAccounts(\n                connection, tokenInfo.address, account\n            );\n\n            if (addresses && addresses.length > 0) {\n                const tokenAccount = await getAssociatedTokenAddress(\n                    tokenInfo.address, account\n                );\n\n                const balance = await getTokenBalance(\n                    connection, tokenAccount\n                );\n\n                setSelectedCurrencyBalance(balance.value.uiAmount);\n                onTokenBalance(balance.value.uiAmount);\n            } else {\n                onSetShowCreateAccount();\n                onError(\"You don't have token account for this token.\")\n            }\n        }\n    }\n\n    const fetchTokenList = () => {\n        const chainId = getChainId(network);\n        new TokenListProvider().resolve().then(async (tokens) => {\n            const tokenList = tokens.filterByChainId(chainId).getList();\n            setAllTokens(allTokens.concat(tokenList));\n        });\n    }\n\n    const onClickMax = () => {\n        onChangeAmount(selectedCurrencyBalance);\n    }\n\n    useEffect(() => {\n        if (allTokens.length === 0) {\n            fetchTokenList();\n        }\n\n        if (updateBalance) {\n            handleSelectToken(updatedAddress);\n            setBalanceUpdated();\n        }\n        // eslint-disable-next-line\n    }, [updateBalance]);\n\n    return (\n        <InputPanel>\n            <ContainerRow>\n                <InputContainer>\n                    <AutoColumn gap=\"md\">\n                        <LabelRow>\n                            <RowBetween>\n                                <div\n                                    fontWeight={500}\n                                    fontSize={14}\n                                >\n                                    Amount\n                                </div>\n\n                                {account && (\n                                    <div\n                                        onClick={onClickMax}\n                                        color=\"rgb(86, 90, 105)\"\n                                        fontWeight={500}\n                                        fontSize={14}\n                                        style={{ display: 'inline', cursor: 'pointer' }}\n                                    >\n                                        {selectedCurrencyBalance !== \"\"\n                                            ? 'Balance: ' + selectedCurrencyBalance.toFixed(3)\n                                            : ' -'\n                                        }\n                                    </div>\n                                )}\n                            </RowBetween>\n                        </LabelRow>\n\n                        <LabelRow>\n                            <RowBetween>\n                                <NumericInput\n                                    value={value}\n                                    onChange={onChangeAmount}\n                                />\n\n                                <DropdownButton\n                                    title={selectedTokenSymbol}\n                                    onSelect={(e) => handleSelectToken(e)}\n                                >\n                                    {allTokens.map((element, key) => (\n                                        element.symbol !== \"SOL\" ? (\n                                            <Dropdown.Item\n                                                key={key}\n                                                eventKey={element.address}\n                                            >\n                                                {element.symbol}\n                                            </Dropdown.Item>\n                                        ) : null\n                                    ))}\n                                </DropdownButton>\n                            </RowBetween>\n                        </LabelRow>\n                    </AutoColumn>\n                </InputContainer>\n            </ContainerRow>\n        </InputPanel>\n    )\n}","import { React, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { AutoColumn } from '../Column'\nimport { RowBetween } from '../Row'\n\nconst InputPanel = styled.div`\n  position: relative;\n  border-radius: 1.25rem;\n  background-color: white;\n  z-index: 1;\n  width: 100%;\n`\n\nconst ContainerRow = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 1.25rem;\n  border: 1px solid rgb(240, 240, 255);\n  transition: border-color 300ms step-start,\n    color 500ms step-start;\n  background-color: white;\n`\n\nconst InputContainer = styled.div`\n  flex: 1;\n  padding: 1rem;\n`\n\nconst Input = styled.input`\n  font-size: 1.25rem;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  width: 0;\n  background-color: white;\n  transition: color 300ms step-start;\n  color: black;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-weight: 500;\n  width: 100%;\n  ::placeholder {\n    color: rgb(195, 197, 217);\n  }\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: rgb(195, 197, 217);\n  }\n`\n\nexport default function AddressInputPanel({\n    id,\n    value,\n    onChange\n}) {\n    const handleInput = useCallback(\n        event => {\n            const input = event.target.value\n            const withoutSpaces = input.replace(/\\s+/g, '')\n            onChange(withoutSpaces)\n        },\n        [onChange]\n    )\n\n    return (\n        <InputPanel id={id}>\n            <ContainerRow>\n                <InputContainer>\n                    <AutoColumn gap=\"md\">\n                        <RowBetween>\n                            Recipient\n            </RowBetween>\n                        <Input\n                            className=\"recipient-address-input\"\n                            type=\"text\"\n                            autoComplete=\"off\"\n                            autoCorrect=\"off\"\n                            autoCapitalize=\"off\"\n                            spellCheck=\"false\"\n                            placeholder=\"Wallet Address\"\n                            pattern=\"^(0x[a-fA-F0-9]{40})$\"\n                            onChange={handleInput}\n                            value={value}\n                        />\n                    </AutoColumn>\n                </InputContainer>\n            </ContainerRow>\n        </InputPanel>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/solana-logo.88dd9cd2.png\";","import React, { useState } from 'react';\nimport '../../scss/styles.scss';\nimport BigNumber from 'bignumber.js';\nimport { Box } from '@chakra-ui/layout';\nimport Wallet from '@project-serum/sol-wallet-adapter';\nimport { Connection, clusterApiUrl } from '@solana/web3.js';\nimport { Card, Row, Col, Button, Image } from 'react-bootstrap';\nimport {\n    fee,\n    network,\n    providerUrl,\n    localnetUrl,\n    explorerLink,\n} from '../../utils/constants';\nimport { AutoColumn } from '../Column';\nimport SocialLinks from '../SocialLinks';\nimport { getSolBalance } from '../../utils/api';\nimport AmountInputPanel from '../AmountInputPanel';\nimport AddressInputPanel from '../AddressInputPanel';\nimport {\n    signAndSendTransaction,\n    createAndSendTestTokens,\n} from '../../utils/mics';\nimport SolanaLogo from '../../assets/solana-logo.png';\n\nexport default function Main() {\n    const [connection] = useState(\n        new Connection(\n            network !== \"localnet\" ?\n                clusterApiUrl(network) :\n                localnetUrl\n        )\n    );\n\n    const [error, setError] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n\n    const [amount, setAmount] = useState(\"\");\n    const [recipient, setRecipient] = useState(\"\");\n    const [solBalance, setSolBalance] = useState(\"\");\n    const [tokenBalance, setTokenBalance] = useState(\"\");\n    const [solletWallet, setSollectWallet] = useState();\n\n    const [isConnected, setIsConnected] = useState(false);\n    const [walletAddress, setWalletAddress] = useState(\"\");\n    const [selectedTokenData, setSelectedTokenData] = useState({});\n    const [showCreateAccount, setShowCreateAccount] = useState(false);\n    const [creatingAccount, setCreatingAccount] = useState(false);\n    const [executing, setExecuting] = useState(false);\n    const [updateBalance, setUpdateBalance] = useState(false);\n    const [txSignature, setTxSignature] = useState(\"\");\n\n    const connectWallet = () => {\n        if (!isConnected) {\n            const wallet = new Wallet(providerUrl);\n            wallet.connect();\n            wallet.on('connect', async (publicKey) => {\n                setIsConnected(true);\n                setSollectWallet(wallet);\n                setWalletAddress(publicKey.toString());\n                console.log('Connected to ' + publicKey.toBase58())\n\n                const sol = await getSolBalance(connection, publicKey);\n                if (sol) {\n                    setSolBalance(sol.uiBalance);\n                }\n\n                if (selectedTokenData && selectedTokenData.address) {\n                    setUpdateBalance(true);\n                }\n            });\n\n            wallet.on('disconnect', () => {\n                setIsConnected(false);\n                console.log('Disconnected')\n            });\n        }\n    }\n\n    const handleValidateAndTransfer = () => {\n        let errorMsg = \"\";\n        let totalAmount = new BigNumber(0);\n\n        if (amount) {\n            totalAmount = new BigNumber(amount).plus(\n                new BigNumber(amount).multipliedBy(fee).dividedBy(100)\n            );\n        }\n\n        if (!recipient && recipient.length !== 44) {\n            errorMsg = \"Invalid recipient address !!\";\n        } else if (amount === \"\") {\n            errorMsg = \"Amount can not be null !!\";\n        } else if (!selectedTokenData || !selectedTokenData.address) {\n            errorMsg = \"Please select the token.\";\n        } else if (totalAmount.gt(new BigNumber(tokenBalance))) {\n            errorMsg = \"Amount should not be greater than available balance\";\n        } else {\n            handleTransferSplToken(totalAmount);\n        }\n\n        handleError(errorMsg);\n    }\n\n    const handleTransferSplToken = (totalAmount) => {\n        setExecuting(true);\n\n        signAndSendTransaction(\n            connection,\n            solletWallet,\n            recipient,\n            totalAmount,\n            selectedTokenData,\n        )\n            .then((result) => {\n                setExecuting(false);\n                handleMesage(\n                    \"Transfer Submitted 🎉\",\n                    result.data.txSignature,\n                    false,\n                );\n\n                let interval = setInterval(async () => {\n                    let status = await connection.getSignatureStatus(\n                        result.data.txSignature\n                    );\n\n                    if (status.value?.confirmationStatus === \"finalized\") {\n                        setUpdateBalance(true);\n                        setMessage(\"\");\n                        clearInterval(interval);\n                    }\n                }, 1000)\n            })\n            .catch((error) => {\n                setExecuting(false);\n                handleError(error.message);\n            });\n    }\n\n    const handleCreateAccount = () => {\n        setCreatingAccount(true);\n\n        createAndSendTestTokens\n            (\n                selectedTokenData.address,\n                walletAddress\n            )\n            .then((result) => {\n                setShowCreateAccount(false);\n                setCreatingAccount(false);\n                handleMesage(\n                    \"Account created successfully 🎉\",\n                    result.data.txSignature,\n                    false,\n                );\n\n                console.log(result.data.txSignature)\n\n                let interval = setInterval(async () => {\n                    let status = await connection.getSignatureStatus(\n                        result.data.txSignature\n                    );\n\n                    console.log(status.value?.confirmationStatus)\n                    if (status.value?.confirmationStatus === \"finalized\") {\n                        setUpdateBalance(true);\n                        setMessage(\"\");\n                        clearInterval(interval);\n                    }\n                }, 1000)\n            })\n            .catch((error) => {\n                setCreatingAccount(false);\n                handleError(error.message);\n            });\n    }\n\n    const handleChangeRecipient = (value) => {\n        setRecipient(value)\n    }\n\n    const handleChangeAmount = (value) => {\n        setAmount(value)\n    }\n\n    const handleSelectToken = (tokenData) => {\n        setSelectedTokenData(tokenData);\n    }\n\n    const handleSetTokenBalance = (value) => {\n        setTokenBalance(value);\n    }\n\n    const handleError = (message) => {\n        setError(message);\n\n        setTimeout(() => {\n            setError(\"\");\n        }, 4000);\n    }\n\n    const handleMesage = (\n        message,\n        signature,\n        enableTimeout,\n    ) => {\n        setMessage(message);\n\n        if (signature) {\n            setTxSignature(signature);\n        }\n\n        if (enableTimeout) {\n            setTimeout(() => {\n                setMessage(\"\");\n            }, !signature ? 4000 : 10000);\n        }\n    }\n\n    return (\n        <main className=\"homepage\">\n\n            {/* Navigation*/}\n            <nav className=\"navbar navbar-expand-lg navbar-light py-3\" id=\"mainNav\">\n                <div className=\"container\">\n                    <div className=\"js-scroll-trigger logo\"></div>\n\n                    <div>\n                        <ul className=\"navbar-nav ml-auto my-2 my-lg-0\">\n                            {solBalance !== \"\" ?\n                                <li className=\"nav-item\">\n                                    <div className=\"sol-balance\">\n                                        <span style={{ marginRight: \"5px\" }}>\n                                            {solBalance.toFixed(2)}\n                                        </span>\n                                        <Image width=\"20px\" src={SolanaLogo}></Image>\n                                    </div>\n                                </li>\n                                : null\n                            }\n\n                            <li className=\"nav-item\">\n                                <Button variant=\"outline-success nav-button\" onClick={connectWallet}>\n                                    {!isConnected ?\n                                        <span>CONNECT</span> :\n                                        <a\n                                            href={`${explorerLink}/address/${walletAddress}?cluster=${network}`}\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                        >\n                                            {walletAddress.substr(0, 4)}\n                                            ...\n                                            {walletAddress.substr(\n                                                walletAddress.length - 4,\n                                                walletAddress.length - 1,\n                                            )}\n                                        </a>\n                                    }\n                                </Button>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n\n            {/* Main*/}\n            <header className=\"homepage\" id=\"\">\n                <div className=\"container h-100\">\n                    <div className=\"row h-100 align-items-center justify-content-center text-center\">\n                        <Card>\n                            <Card.Body>\n                                <AutoColumn gap=\"20px\">\n                                    <AddressInputPanel\n                                        id=\"recipient\"\n                                        value={recipient}\n                                        onChange={handleChangeRecipient}\n                                    />\n\n                                    <AmountInputPanel\n                                        connection={connection}\n                                        account={walletAddress}\n                                        value={amount}\n                                        onChangeAmount={handleChangeAmount}\n                                        onSelectToken={handleSelectToken}\n                                        onTokenBalance={handleSetTokenBalance}\n                                        onSetShowCreateAccount={\n                                            () => setShowCreateAccount(true)\n                                        }\n                                        onError={handleError}\n                                        updateBalance={updateBalance}\n                                        updatedAddress={selectedTokenData.address}\n                                        setBalanceUpdated={() => setUpdateBalance(false)}\n                                    />\n\n                                    {amount && selectedTokenData && selectedTokenData.symbol ?\n                                        <div style={{ fontSize: \"14px\" }}>\n                                            <span>Total Amount : </span>\n                                            {amount} <span> + </span>\n                                            {\n                                                (new BigNumber(amount)\n                                                    .multipliedBy(fee)\n                                                    .dividedBy(100)\n                                                ).toString()\n                                            }\n                                            <span> (fee) = </span>\n                                            {\n                                                (new BigNumber(amount)\n                                                    .plus(\n                                                        new BigNumber(amount)\n                                                            .multipliedBy(fee)\n                                                            .dividedBy(100)\n                                                    )\n                                                ).toString()\n                                            } {selectedTokenData.symbol}\n                                        </div>\n                                        : null\n                                    }\n\n                                    {error ?\n                                        <div className=\"error-msg\">\n                                            {error}\n                                        </div>\n                                        : null\n                                    }\n\n                                    {message ?\n                                        <div className=\"message\">\n                                            {message}\n                                            <div>\n                                                {txSignature ?\n                                                    <div>\n                                                        <a\n                                                            href={`${explorerLink}/tx/${txSignature}?cluster=${network}`}\n                                                            target=\"_blank\"\n                                                            rel=\"noopener noreferrer\"\n                                                        >\n                                                            <strong>Click here</strong>\n                                                        </a>\n                                                        <span> to see tx execution on the solana explorer.</span>\n                                                    </div>\n                                                    : null\n                                                }\n                                            </div>\n                                        </div>\n                                        : null\n                                    }\n\n                                    <Row className=\"text-center\">\n                                        <Col>\n                                            {isConnected ? (\n                                                showCreateAccount ?\n                                                    < Button\n                                                        onClick={handleCreateAccount}\n                                                        variant=\"outline-success\"\n                                                    >\n                                                        {creatingAccount ?\n                                                            <div className=\"d-flex align-items-center\">\n                                                                Creating Account\n                                                            <span className=\"loading ml-2\"></span>\n                                                            </div>\n                                                            :\n                                                            <div>Create Account</div>\n                                                        }\n                                                    </Button>\n                                                    :\n                                                    <Button\n                                                        onClick={handleValidateAndTransfer}\n                                                        variant=\"outline-success\"\n                                                    >\n                                                        {executing ?\n                                                            <div className=\"d-flex align-items-center\">\n                                                                Executing\n                                                            <span className=\"loading ml-2\"></span>\n                                                            </div>\n                                                            :\n                                                            <div>Submit</div>\n                                                        }\n                                                    </Button>\n                                            ) :\n                                                <Button\n                                                    onClick={connectWallet}\n                                                    variant=\"outline-success\"\n                                                >\n                                                    <div>Connect Wallet</div>\n                                                </Button>\n                                            }\n                                        </Col>\n                                    </Row>\n                                </AutoColumn>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </div>\n            </header>\n\n            {/* Footer*/}\n            <footer className=\"py-5\">\n                <div className=\"container\">\n                    <Box\n                        maxW=\"containerLg\"\n                        color=\"white\" d=\"flex\"\n                        justifyContent=\"space-between\"\n                    >\n                        <div className=\"copyright text-muted\">\n                            Copyright © 2021 - MetaSol\n                        </div>\n                        <SocialLinks />\n                    </Box>\n                </div>\n            </footer>\n        </main >\n    );\n}\n","import React from 'react';\nimport Main from './components/Main';\n\nexport default function App() {\n    return (\n        <div>\n            <Main />\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ReactGA from 'react-ga';\nimport { config } from 'dotenv';\nimport reportWebVitals from './reportWebVitals';\n\nconfig();\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nReactGA.initialize(\n    process.env.REACT_APP_GOOGLE_ANALYTICS_ID\n);\n\nReactGA.pageview(\n    window.location.pathname + window.location.search\n);\n\nreportWebVitals();\n","import {\n    PublicKey,\n    SystemProgram,\n    SYSVAR_RENT_PUBKEY,\n    Transaction,\n    TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n    TOKEN_PROGRAM_ID,\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n} from \"./constants\";\n\nexport const getSolBalance = async (connection, account) => {\n    try {\n        let balance = await connection.getBalance(account);\n        return {\n            balance,\n            uiBalance: balance / Math.pow(10, 9),\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getTokenAccounts = async (connection, mint, owner) => {\n    try {\n        let accounts = await connection.getTokenAccountsByOwner(\n            new PublicKey(owner),\n            { mint: new PublicKey(mint) },\n        );\n\n        return accounts.value;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getTokenBalance = async (connection, tokenAccount) => {\n    try {\n        return await connection.getTokenAccountBalance(tokenAccount);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getAssociatedTokenAddress = async (mint, owner) => {\n    try {\n        mint = new PublicKey(mint);\n        owner = new PublicKey(owner);\n\n        return (\n            await PublicKey.findProgramAddress(\n                [owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n                ASSOCIATED_TOKEN_PROGRAM_ID,\n            )\n        )[0];\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport async function createAssociatedTokenAccount(\n    connection,\n    owner,\n    associatedAddress,\n    mint,\n    payer\n) {\n    try {\n        await connection.sendAndConfirmTransaction(\n            'CreateAssociatedTokenAccount',\n            connection,\n            new Transaction().add(\n                createAssociatedTokenAccountInstruction(\n                    ASSOCIATED_TOKEN_PROGRAM_ID,\n                    TOKEN_PROGRAM_ID,\n                    mint,\n                    associatedAddress,\n                    owner,\n                    payer.publicKey,\n                ),\n            ),\n            payer,\n        );\n\n        return true;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n/**\n * Construct the AssociatedTokenProgram instruction to create the associated\n * token account\n *\n * @param associatedProgramId SPL Associated Token program account\n * @param programId SPL Token program account\n * @param mint Token mint account\n * @param associatedAccount New associated account\n * @param owner Owner of the new account\n * @param payer Payer of fees\n */\nfunction createAssociatedTokenAccountInstruction(\n    associatedProgramId,\n    programId,\n    mint,\n    associatedAccount,\n    owner,\n    payer,\n) {\n    const data = Buffer.alloc(0);\n\n    let keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedAccount, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedProgramId,\n        data,\n    });\n}\n","import axios from 'axios';\nimport {\n    PublicKey,\n    Transaction,\n    TransactionInstruction,\n} from '@solana/web3.js';\nimport ReactGA from 'react-ga';\nimport BigNumber from 'bignumber.js';\nimport {\n    relayerUrl,\n    FEE_PAYER_PUBLIC_KEY,\n    METASOL_PROGRAM_ID,\n    submitTxLayout,\n    TOKEN_PROGRAM_ID,\n    METASOL_PUBLIC_KEY,\n} from \"./constants\";\nimport { u64 } from './uint64';\nimport { getAssociatedTokenAddress } from './api';\n\nexport const getChainId = (network) => {\n    let chainId = 0;\n\n    switch (network) {\n        case \"mainnet-beta\":\n            chainId = 101;\n            break;\n        case \"testnet\":\n            chainId = 102;\n            break;\n        case \"devnet\":\n            chainId = 103;\n            break;\n        default:\n            chainId = 102;\n            break;\n    }\n\n    return chainId;\n}\n\nexport const signAndSendTransaction = (\n    connection,\n    solletWallet,\n    recipient,\n    transferAmount,\n    selectedTokenData,\n) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const senderSplAccount = await getAssociatedTokenAddress(\n                selectedTokenData.address, solletWallet.publicKey.toString(),\n            );\n            const recipientSplAccount = await getAssociatedTokenAddress(\n                selectedTokenData.address, recipient,\n            );\n            const feePayerSplAccount = await getAssociatedTokenAddress(\n                selectedTokenData.address, FEE_PAYER_PUBLIC_KEY.toString(),\n            );\n\n            const keys = [\n                { pubkey: senderSplAccount, isSigner: false, isWritable: true },\n                { pubkey: recipientSplAccount, isSigner: false, isWritable: true },\n                { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n                { pubkey: new PublicKey(selectedTokenData.address), isSigner: false, isWritable: false },\n                { pubkey: solletWallet.publicKey, isSigner: true, isWritable: true },\n                { pubkey: feePayerSplAccount, isSigner: false, isWritable: true },\n                { pubkey: METASOL_PUBLIC_KEY, isSigner: false, isWritable: true },\n            ];\n\n            const data = Buffer.alloc(submitTxLayout.span);\n\n            const amount = Number(\n                new BigNumber(transferAmount).times(\n                    new BigNumber(10).exponentiatedBy(\n                        new BigNumber(selectedTokenData.decimals)\n                    )\n                )\n            );\n\n            submitTxLayout.encode(\n                {\n                    instruction: 1,\n                    amount: new u64(amount).toBuffer(),\n                },\n                data,\n            );\n\n            const instruction = new TransactionInstruction({\n                keys,\n                programId: METASOL_PROGRAM_ID,\n                data,\n            });\n\n            const recentBlock = await connection.getRecentBlockhash();\n\n            const transaction = new Transaction({\n                feePayer: FEE_PAYER_PUBLIC_KEY,\n                recentBlockhash: recentBlock.blockhash\n            }).add(instruction);\n\n            const signedTx = await solletWallet.signTransaction(transaction);\n\n            const bufferTx = signedTx.serialize({\n                verifySignatures: false\n            });\n\n            const result = await sendToRelayer(bufferTx);\n            resolve(result);\n\n            ReactGA.event({\n                category: 'Transfer',\n                action: 'Executed',\n                label: amount.toString(),\n            });\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport const createAndSendTestTokens = (\n    mintAddress,\n    ownerAddress,\n) => {\n    return new Promise((resolve, reject) => {\n        axios.post\n            (\n                `${relayerUrl}/create-wallet`,\n                {\n                    mintAddress,\n                    ownerAddress,\n                }\n            )\n            .then((result) => {\n                resolve(result)\n\n                ReactGA.event({\n                    category: 'Wallet',\n                    action: 'Created',\n                });\n            })\n            .catch((error) => {\n                reject(error);\n            })\n    });\n};\n\n\nconst sendToRelayer = (bufferTx) => {\n    return new Promise((resolve, reject) => {\n        axios.post\n            (\n                `${relayerUrl}/execute-tx`,\n                {\n                    bufferTx\n                }\n            )\n            .then((txSignature) => {\n                resolve(txSignature)\n            })\n            .catch((error) => {\n                reject(error);\n            })\n    });\n};\n"],"sourceRoot":""}